#!/usr/bin/env python
"""
Script pour cr√©er des donn√©es de test dans l'historique des conversations
"""

import os
import sys
import django
from pathlib import Path
from datetime import datetime, timedelta

# Configuration Django
sys.path.append(str(Path(__file__).parent))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'linguameet_project.settings')
django.setup()

from conference.models import Room, Participant, ConversationHistory
from conference.ai_pipeline import AudioProcessor
from django.core.files.base import ContentFile

def create_test_history():
    """Cr√©er des donn√©es de test pour l'historique"""
    print("üìù Cr√©ation de donn√©es de test pour l'historique")
    print("=" * 50)
    
    try:
        # Cr√©er une salle de test
        room = Room.objects.create(
            nom="Salle de conf√©rence internationale",
            actif=True
        )
        print(f"‚úÖ Salle cr√©√©e: {room.nom}")
        
        # Cr√©er plusieurs participants
        participants = [
            Participant.objects.create(
                room=room,
                nom="Marie (Fran√ßais)",
                langue_parole="fr",
                langue_souhait√©e="en",
                actif=True,
                micro_actif=True
            ),
            Participant.objects.create(
                room=room,
                nom="John (Anglais)",
                langue_parole="en",
                langue_souhait√©e="fr",
                actif=True,
                micro_actif=True
            ),
            Participant.objects.create(
                room=room,
                nom="Carlos (Espagnol)",
                langue_parole="es",
                langue_souhait√©e="fr",
                actif=True,
                micro_actif=True
            ),
            Participant.objects.create(
                room=room,
                nom="Anna (Allemand)",
                langue_parole="de",
                langue_souhait√©e="en",
                actif=True,
                micro_actif=True
            )
        ]
        
        print(f"‚úÖ Participants cr√©√©s: {len(participants)}")
        
        # Initialiser le pipeline audio
        audio_processor = AudioProcessor()
        
        # Conversations de test avec diff√©rents timestamps
        test_conversations = [
            # Conversations r√©centes (aujourd'hui)
            ("Bonjour tout le monde, comment allez-vous ?", "fr", "en", 0),
            ("Hello everyone, how are you doing?", "en", "fr", 0),
            ("Je suis ravi de participer √† cette conf√©rence.", "fr", "en", 0),
            ("I am excited to participate in this conference.", "en", "fr", 0),
            ("¬øC√≥mo est√°n todos?", "es", "fr", 0),
            ("Wie geht es euch allen?", "de", "en", 0),
            
            # Conversations d'hier
            ("Nous avons beaucoup de travail √† faire.", "fr", "en", 1),
            ("We have a lot of work to do.", "en", "fr", 1),
            ("¬øCu√°l es el pr√≥ximo paso?", "es", "fr", 1),
            ("Was ist der n√§chste Schritt?", "de", "en", 1),
            
            # Conversations de la semaine derni√®re
            ("La r√©union √©tait tr√®s productive.", "fr", "en", 7),
            ("The meeting was very productive.", "en", "fr", 7),
            ("¬øCu√°ndo es la pr√≥xima reuni√≥n?", "es", "fr", 7),
            ("Wann ist das n√§chste Treffen?", "de", "en", 7),
            
            # Conversations plus anciennes
            ("Merci pour votre participation.", "fr", "en", 14),
            ("Thank you for your participation.", "en", "fr", 14),
            ("¬øTienen alguna pregunta?", "es", "fr", 14),
            ("Haben Sie Fragen?", "de", "en", 14),
        ]
        
        conversations_created = 0
        
        for original_text, original_lang, target_lang, days_ago in test_conversations:
            print(f"\nüé§ Cr√©ation conversation: '{original_text}' ({original_lang} ‚Üí {target_lang})")
            
            # Traduire le texte
            translated_text = audio_processor.translate_sync(original_text, original_lang, target_lang)
            
            # G√©n√©rer l'audio
            audio_bytes = audio_processor.text_to_speech_sync(translated_text, target_lang)
            
            if audio_bytes:
                # Cr√©er des conversations pour diff√©rents participants
                for speaker in participants:
                    for listener in participants:
                        # Ne pas cr√©er de conversation pour le m√™me participant
                        if speaker.id == listener.id:
                            continue
                        
                        # Cr√©er l'enregistrement avec timestamp personnalis√©
                        timestamp = datetime.now() - timedelta(days=days_ago)
                        
                        conversation = ConversationHistory.objects.create(
                            room=room,
                            speaker=speaker,
                            listener=listener,
                            original_text=original_text,
                            translated_text=translated_text,
                            original_language=original_lang,
                            target_language=listener.langue_souhait√©e,
                            audio_duration=len(audio_bytes) / 16000,
                            timestamp=timestamp
                        )
                        
                        # Sauvegarder le fichier audio
                        filename = f"history_test_{conversation.id}_{speaker.nom}_{listener.nom}.wav"
                        conversation.audio_file.save(
                            filename,
                            ContentFile(audio_bytes),
                            save=True
                        )
                        
                        conversations_created += 1
                        
                        if conversations_created <= 5:  # Afficher seulement les 5 premi√®res
                            print(f"   üíæ {speaker.nom} ‚Üí {listener.nom}: {conversation.id}")
        
        print(f"\nüìä R√©sum√©:")
        print(f"   - Conversations cr√©√©es: {conversations_created}")
        print(f"   - Fichiers audio sauvegard√©s: {conversations_created}")
        print(f"   - Participants: {len(participants)}")
        print(f"   - P√©riode: {test_conversations[-1][3]} jours")
        
        # Afficher quelques exemples
        print(f"\nüìã Exemples de conversations:")
        recent_conversations = ConversationHistory.objects.filter(room=room).order_by('-timestamp')[:5]
        for conv in recent_conversations:
            print(f"   - {conv.speaker.nom} ‚Üí {conv.listener.nom}")
            print(f"     '{conv.original_text}' ‚Üí '{conv.translated_text}'")
            print(f"     üìÖ {conv.timestamp.strftime('%d/%m/%Y %H:%M')}")
            print(f"     üìÅ {conv.audio_file.name}")
            print()
        
        print("‚úÖ Donn√©es de test cr√©√©es avec succ√®s!")
        print(f"üåê Acc√©dez √† l'historique: http://localhost:8000/conversation-history/")
        
        return room.id
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation: {e}")
        import traceback
        traceback.print_exc()
        return None

if __name__ == "__main__":
    room_id = create_test_history()
    if room_id:
        print(f"üéØ ID de la salle cr√©√©e: {room_id}")
    sys.exit(0 if room_id else 1) 