"""
Django settings for linguameet_project project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv

# Charger les variables d'environnement depuis .env (local uniquement)
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY', 'django-insecure-your-secret-key-here')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'True').lower() == 'true'

# Hosts autorisés
ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', '*').split(',')

# Ajouter automatiquement le domaine Render si détecté
RENDER_EXTERNAL_HOSTNAME = os.getenv('RENDER_EXTERNAL_HOSTNAME')
if RENDER_EXTERNAL_HOSTNAME:
    ALLOWED_HOSTS.append(RENDER_EXTERNAL_HOSTNAME)

# CSRF trusted origins pour Cloud Run et Render
CSRF_TRUSTED_ORIGINS = os.getenv('CSRF_TRUSTED_ORIGINS', '').split(',') if os.getenv('CSRF_TRUSTED_ORIGINS') else []
if RENDER_EXTERNAL_HOSTNAME:
    CSRF_TRUSTED_ORIGINS.append(f'https://{RENDER_EXTERNAL_HOSTNAME}')


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sitemaps',
    'channels',
    'conference',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # Pour servir les fichiers statiques
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'linguameet_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# Pages d'erreur personnalisées
# En production, DEBUG doit être False pour activer ces pages
HANDLER404 = 'django.views.defaults.page_not_found'
HANDLER500 = 'django.views.defaults.server_error'

WSGI_APPLICATION = 'linguameet_project.wsgi.application'

# Channels configuration
ASGI_APPLICATION = 'linguameet_project.asgi.application'

# Channel layers for WebSocket support
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels.layers.InMemoryChannelLayer',
    },
}

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Configuration de la base de données
if os.getenv('DATABASE_URL'):
    # Production: PostgreSQL sur Cloud SQL
    import dj_database_url
    DATABASES = {
        'default': dj_database_url.config(
            default=os.getenv('DATABASE_URL'),
            conn_max_age=600,
            conn_health_checks=True,
        )
    }
elif os.getenv('POSTGRES_HOST'):
    # Production: PostgreSQL manuel
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.getenv('POSTGRES_DB', 'linguameet'),
            'USER': os.getenv('POSTGRES_USER', 'postgres'),
            'PASSWORD': os.getenv('POSTGRES_PASSWORD', ''),
            'HOST': os.getenv('POSTGRES_HOST', 'localhost'),
            'PORT': os.getenv('POSTGRES_PORT', '5432'),
            'CONN_MAX_AGE': 600,  # Réutiliser les connexions pendant 10 minutes
            'CONN_HEALTH_CHECKS': True,  # Vérifier la santé des connexions
        }
    }
else:
    # Développement: SQLite
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'fr-fr'

TIME_ZONE = 'Europe/Paris'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [
    BASE_DIR / 'static',
]
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Configuration de WhiteNoise pour la compression et le cache
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Vosk model path (will be downloaded automatically)
VOSK_MODEL_PATH = BASE_DIR / 'vosk_models'

# Supported languages for translation (20+ langues)
SUPPORTED_LANGUAGES = {
    'fr': 'Français',
    'en': 'English',
    'es': 'Español',
    'de': 'Deutsch',
    'it': 'Italiano',
    'pt': 'Português',
    'pt-BR': 'Português (Brasil)',
    'ru': 'Русский',
    'ar': 'العربية (Arabe)',
    'zh': '中文 (Chinois)',
    'zh-CN': '简体中文 (Chinois simplifié)',
    'zh-TW': '繁體中文 (Chinois traditionnel)',
    'ja': '日本語 (Japonais)',
    'ko': '한국어 (Coréen)',
    'hi': 'हिन्दी (Hindi)',
    'nl': 'Nederlands (Néerlandais)',
    'pl': 'Polski (Polonais)',
    'tr': 'Türkçe (Turc)',
    'sv': 'Svenska (Suédois)',
    'no': 'Norsk (Norvégien)',
    'da': 'Dansk (Danois)',
    'fi': 'Suomi (Finnois)',
    'el': 'Ελληνικά (Grec)',
    'he': 'עברית (Hébreu)',
    'th': 'ไทย (Thaï)',
    'vi': 'Tiếng Việt (Vietnamien)',
    'id': 'Bahasa Indonesia (Indonésien)',
    'ms': 'Bahasa Melayu (Malais)',
    'cs': 'Čeština (Tchèque)',
    'ro': 'Română (Roumain)',
    'uk': 'Українська (Ukrainien)',
}

# Audio Pipeline Configuration
# Set to True to use Google Cloud APIs (better quality, requires API keys)
# Set to False to use Vosk/gTTS (offline, lower quality)
USE_GOOGLE_CLOUD_AUDIO = os.getenv('USE_GOOGLE_CLOUD', 'False').lower() == 'true'

# Google Cloud credentials (if using Google Cloud Audio)
# Set via environment variable: GOOGLE_APPLICATION_CREDENTIALS=/path/to/key.json

# Authentication settings
LOGIN_URL = 'conference:login'
LOGIN_REDIRECT_URL = 'conference:home'
LOGOUT_REDIRECT_URL = 'conference:login'

# Session configuration (fix pour le bug de connexion/déconnexion)
SESSION_ENGINE = 'django.contrib.sessions.backends.db'  # Utiliser la base de données pour les sessions
SESSION_COOKIE_AGE = 86400  # 24 heures
SESSION_SAVE_EVERY_REQUEST = True  # Sauvegarder la session à chaque requête
SESSION_COOKIE_SECURE = not DEBUG  # True en production (HTTPS)
SESSION_COOKIE_HTTPONLY = True  # Empêcher l'accès JavaScript aux cookies de session
SESSION_COOKIE_SAMESITE = 'Lax'  # Protection CSRF
CSRF_COOKIE_SECURE = not DEBUG  # True en production (HTTPS)

# Configuration CORS pour WebSocket (si nécessaire)
if not DEBUG:
    # En production, utiliser des paramètres sécurisés
    SECURE_SSL_REDIRECT = False  # Render gère déjà le SSL
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
