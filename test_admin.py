#!/usr/bin/env python
"""
Script pour tester l'enregistrement des mod√®les dans l'admin
"""

import os
import sys
import django
from pathlib import Path

# Configuration Django
sys.path.append(str(Path(__file__).parent))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'linguameet_project.settings')
django.setup()

from django.contrib import admin
from conference.models import Room, Participant, ConversationHistory

def test_admin_registration():
    """Tester l'enregistrement des mod√®les dans l'admin"""
    print("üîç Test de l'enregistrement des mod√®les dans l'admin")
    print("=" * 50)
    
    try:
        # V√©rifier si les mod√®les sont enregistr√©s
        registered_models = admin.site._registry
        
        print(f"üìã Mod√®les enregistr√©s dans l'admin: {len(registered_models)}")
        
        for model, admin_class in registered_models.items():
            app_label = model._meta.app_label
            model_name = model._meta.model_name
            admin_name = admin_class.__class__.__name__
            print(f"   ‚úÖ {app_label}.{model_name} -> {admin_name}")
        
        # V√©rifier sp√©cifiquement nos mod√®les
        print(f"\nüéØ V√©rification de nos mod√®les:")
        
        if Room in registered_models:
            print(f"   ‚úÖ Room: {registered_models[Room].__class__.__name__}")
        else:
            print(f"   ‚ùå Room: NON ENREGISTR√â")
            
        if Participant in registered_models:
            print(f"   ‚úÖ Participant: {registered_models[Participant].__class__.__name__}")
        else:
            print(f"   ‚ùå Participant: NON ENREGISTR√â")
            
        if ConversationHistory in registered_models:
            print(f"   ‚úÖ ConversationHistory: {registered_models[ConversationHistory].__class__.__name__}")
        else:
            print(f"   ‚ùå ConversationHistory: NON ENREGISTR√â")
        
        # V√©rifier les donn√©es existantes
        print(f"\nüìä Donn√©es existantes:")
        print(f"   - Salles: {Room.objects.count()}")
        print(f"   - Participants: {Participant.objects.count()}")
        print(f"   - Conversations: {ConversationHistory.objects.count()}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = test_admin_registration()
    sys.exit(0 if success else 1) 